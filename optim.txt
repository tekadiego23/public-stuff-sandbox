# eqs/apis/utils_async.py
import asyncio
from fastapi.responses import JSONResponse

def run_forward_post_request(app, reqJson, requestType, sla_seconds: float = 10.0):
    """
    Exécute forward_post_request (sync) dans le thread pool FastAPI.
    Protège par un timeout SLA (par défaut 10s).
    """
    loop = asyncio.get_running_loop()

    def _sync_call():
        return app.state.forward_post_request(
            reqJson=reqJson,
            requestType=requestType,
            pricer_factory=app.state.get_pricer,
            sla_seconds=sla_seconds,
        )

    return asyncio.wait_for(
        loop.run_in_executor(app.state.tpool, _sync_call),
        timeout=sla_seconds,
    )



# eqs/apis/requests_apis.py
from fastapi import APIRouter, Request, Header
from fastapi.responses import JSONResponse
import eqs.apis.models as models
from .utils_async import run_forward_post_request

router = APIRouter()

@router.post("/pricing-request")
async def pricing_request(
    request: Request,
    reqJson: models.PricingRequestBody,
    trace_id: str | None = Header(default=None),
):
    try:
        return await run_forward_post_request(
            app=request.app,
            reqJson=reqJson,
            requestType=models.RequestType.pricingRequest,
            sla_seconds=10.0,
        )
    except asyncio.TimeoutError:
        return JSONResponse(status_code=504, content={"message": "SLA 10s exceeded"})

@router.post("/sync-no-dist-request")
async def sync_no_dist_request(
    request: Request,
    reqJson: models.PricingRequestBody,
):
    try:
        return await run_forward_post_request(
            app=request.app,
            reqJson=reqJson,
            requestType=models.RequestType.noDistRequest,
        )
    except asyncio.TimeoutError:
        return JSONResponse(status_code=504, content={"message": "SLA 10s exceeded"})

# ⬆️ Tu dupliques ce schéma pour tes 3 autres endpoints
